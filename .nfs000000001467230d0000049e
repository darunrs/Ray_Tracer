#include "light.h"
#include "phong_shader.h"
#include "ray.h"
#include "render_world.h"
#include "object.h"

vec3 Phong_Shader::
Shade_Surface(const Ray& ray,const vec3& intersection_point,
    const vec3& normal,int recursion_depth) const
{
    vec3 color;
    //TODO; determine the color
    color = color_ambient * world.ambient_color * world.ambient_intensity;
    Ray lightRay;

    for(unsigned i = 0; i < world.lights.size(); i++) {
      lightRay.direction = (world.lights[i]->position - intersection_point); //Points from object to light
      double angle = std::max(dot(normal, lightRay.direction.normalized()), 0.0);
      vec3 lightColor = world.lights[i]->Emitted_Light(lightRay.direction);
   	  color += (color_diffuse * lightColor * angle);
    }
    return color;
}
